<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p" 
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
      ">
	
	<!-- Scans the classpath for annotated components that will be auto-registered as Spring beans -->
	<!-- <context:component-scan base-package="com.nkxgen.spring.controller" /> -->
	<context:component-scan base-package="com" />
	<!-- Activates various annotations to be detected in bean classes e.g: @Autowired -->
	<context:annotation-config />

<!-- 	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://192.168.110.48:5432/plf_training" />
		<property name="username" value="plf_training_admin" />
		<property name="password" value="pff123" />
	</bean> -->
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/postgres" />
		<property name="username" value="postgres" />
		<property name="password" value="1234" />
	</bean>
	
	<bean id="entityManagerFactory" 
			class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
			p:packagesToScan="com"
            p:dataSource-ref="dataSource" >
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<!-- Transactions -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<bean id="sprintService" class="com.pennant.prodmtr.service.Impl.SprintServiceImpl" autowire="byName"/>
	<bean id="sprintDAO" class="com.pennant.prodmtr.Dao.Impl.SprintDAOImpl" autowire="byName"/>
	<bean id="resourceDAO" class="com.pennant.prodmtr.Dao.Impl.ResourceDaoImpl" autowire="byName"/>
	<bean id="roleService" class="com.pennant.prodmtr.service.Impl.RoleServiceImpl" autowire="byName"/>
	<bean id="roleDAO" class="com.pennant.prodmtr.Dao.Impl.RoleDaoImpl" autowire="byName"/>
	<bean id="projectDAO" class="com.pennant.prodmtr.Dao.Impl.ProjectDAOImpl" autowire="byName"/>
	<bean id="role" class="com.pennant.prodmtr.model.Entity.Role" autowire="byName"/>
	<bean id="user" class="com.pennant.prodmtr.model.Entity.User" autowire="byName"/>
	<bean id="task" class="com.pennant.prodmtr.model.Entity.Task" autowire="byName"/>
	<bean id="taskService" class="com.pennant.prodmtr.service.Impl.TaskServiceImpl" autowire="byName"/>
	<bean id="taskDao" class="com.pennant.prodmtr.Dao.Impl.TaskDaoImpl" autowire="byName"/>
	<bean id="projectTaskdao" class="com.pennant.prodmtr.Dao.Impl.ProjectTaskdaoImpl" autowire="byName"/> 


<bean id="projectTaskService" class="com.pennant.prodmtr.service.impl.ProjectTaskServiceImpl">
    <constructor-arg ref="resourceService" />
    <constructor-arg ref="projectService" />
</bean>

<bean id="resourceService" class="com.pennant.prodmtr.service.impl.ResourceServiceImpl">
    <!-- Additional configuration for ResourceService bean -->
</bean>

<bean id="projectService" class="com.pennant.prodmtr.service.impl.ProjectServiceImpl">
    <!-- Additional configuration for ProjectService bean -->
</bean>


<!-- 	<bean id="projectService" class="com.pennant.prodmtr.service.Impl.ProjectServiceImpl" autowire="byName"/>
	<bean id="projectTaskService" class="com.pennant.prodmtr.service.Impl.ProjectTaskServiceImpl" autowire="byName"/>
	<bean id="resourceService" class="com.pennant.prodmtr.service.Impl.ResourceServiceImpl" autowire="byName"/> -->


    <bean id="analyticService" class="com.pennant.prodmtr.service.Impl.AnalyticServiceImpl" autowire="byName"/> 
     <bean id="analyticsDao" class="com.pennant.prodmtr.Dao.Impl.AnalyticsDaoImpl" autowire="byName"/> 


	<bean id="moduleDAO" class="com.pennant.prodmtr.Dao.Impl.ModuleDAOImpl" autowire="byName"/> 
    <bean id="moduleService" class="com.pennant.prodmtr.service.Impl.ModuleServiceImpl" autowire="byName"/> 
     <bean id="funitDAO" class="com.pennant.prodmtr.Dao.Impl.FunctionalunitDAO" autowire="byName"/> 
     <bean id="Funitservice" class="com.pennant.prodmtr.service.Impl.FunctionalUnitServiceImpl" autowire="byName"/> 

</beans>